AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  {"createdOn":"Mac","createdBy":"Amplify","createdWith":"12.1.1","stackType":"auth-Cognito","metadata":{}}
Parameters:
  env:
    Type: String
  authRoleArn:
    Type: String
  unauthRoleArn:
    Type: String
  functionamplifyIdentityBrokerCustomMessageArn:
    Type: String
    Default: functionamplifyIdentityBrokerCustomMessageArn
  functionamplifyIdentityBrokerCustomMessageName:
    Type: String
    Default: functionamplifyIdentityBrokerCustomMessageName
  functionamplifyIdentityBrokerDefineAuthChallengeArn:
    Type: String
    Default: functionamplifyIdentityBrokerDefineAuthChallengeArn
  functionamplifyIdentityBrokerDefineAuthChallengeName:
    Type: String
    Default: functionamplifyIdentityBrokerDefineAuthChallengeName
  functionamplifyIdentityBrokerVerifyAuthChallengeArn:
    Type: String
    Default: functionamplifyIdentityBrokerVerifyAuthChallengeArn
  functionamplifyIdentityBrokerVerifyAuthChallengeName:
    Type: String
    Default: functionamplifyIdentityBrokerVerifyAuthChallengeName
  functionamplifyIdentityBrokerCreateAuthChallengeArn:
    Type: String
    Default: functionamplifyIdentityBrokerCreateAuthChallengeArn
  functionamplifyIdentityBrokerCreateAuthChallengeName:
    Type: String
    Default: functionamplifyIdentityBrokerCreateAuthChallengeName
  resourceNameTruncated:
    Type: String
  userPoolName:
    Type: String
  autoVerifiedAttributes:
    Type: CommaDelimitedList
  mfaConfiguration:
    Type: String
  mfaTypes:
    Type: CommaDelimitedList
  smsAuthenticationMessage:
    Type: String
  smsVerificationMessage:
    Type: String
  emailVerificationSubject:
    Type: String
  emailVerificationMessage:
    Type: String
  defaultPasswordPolicy:
    Type: String
  passwordPolicyMinLength:
    Type: Number
  passwordPolicyCharacters:
    Type: CommaDelimitedList
  requiredAttributes:
    Type: CommaDelimitedList
  userpoolClientGenerateSecret:
    Type: String
  userpoolClientRefreshTokenValidity:
    Type: Number
  userpoolClientWriteAttributes:
    Type: CommaDelimitedList
  userpoolClientReadAttributes:
    Type: CommaDelimitedList
  userpoolClientLambdaRole:
    Type: String
  userpoolClientSetAttributes:
    Type: String
  useDefault:
    Type: String
  authSelections:
    Type: String
  resourceName:
    Type: String
  usernameAttributes:
    Type: CommaDelimitedList
  userPoolGroups:
    Type: String
  adminQueries:
    Type: String
  triggers:
    Type: String
  hostedUI:
    Type: String
  userPoolGroupList:
    Type: CommaDelimitedList
  parentStack:
    Type: String
  permissions:
    Type: CommaDelimitedList
  dependsOn:
    Type: CommaDelimitedList
  hostedUIDomainName:
    Type: String
  authProvidersUserPool:
    Type: CommaDelimitedList
  hostedUIProviderMeta:
    Type: String
  hostedUIProviderCreds:
    Type: String
  oAuthMetadata:
    Type: String
Conditions:
  ShouldNotCreateEnvResources:
    Fn::Equals:
      - Ref: env
      - NONE
Resources:
  SNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - brokeraue6c0c3e3_sns-role
          - Fn::Join:
              - ''
              - - sns
                - undefined
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - '-'
                        - Ref: AWS::StackName
                - '-'
                - Ref: env
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: brokeraue6c0c3e3_role_external_id
      Policies:
        - PolicyName: brokeraue6c0c3e3-sns-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: '*'
  UserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - Ref: userPoolName
          - Fn::Join:
              - ''
              - - Ref: userPoolName
                - '-'
                - Ref: env
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: locale
          Required: false
          Mutable: true
        - Name: phone_number
          Required: false
          Mutable: true
        - Name: tos_signed
          Required: false
          Mutable: true
          AttributeDataType: Boolean
        - Name: tos_version
          Required: false
          Mutable: true
          AttributeDataType: String
        - Name: newsletter
          Required: false
          Mutable: true
          AttributeDataType: Boolean
      LambdaConfig:
        CustomMessage:
          Ref: functionamplifyIdentityBrokerCustomMessageArn
        DefineAuthChallenge:
          Ref: functionamplifyIdentityBrokerDefineAuthChallengeArn
        VerifyAuthChallengeResponse:
          Ref: functionamplifyIdentityBrokerVerifyAuthChallengeArn
        CreateAuthChallenge:
          Ref: functionamplifyIdentityBrokerCreateAuthChallengeArn
      AutoVerifiedAttributes:
        Ref: autoVerifiedAttributes
      EmailVerificationMessage:
        Ref: emailVerificationMessage
      EmailVerificationSubject:
        Ref: emailVerificationSubject
      Policies:
        PasswordPolicy:
          MinimumLength:
            Ref: passwordPolicyMinLength
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes:
        Ref: usernameAttributes
      MfaConfiguration:
        Ref: mfaConfiguration
      SmsVerificationMessage:
        Ref: smsVerificationMessage
      SmsConfiguration:
        SnsCallerArn:
          Fn::GetAtt:
            - SNSRole
            - Arn
        ExternalId: brokeraue6c0c3e3_role_external_id
    DependsOn: SNSRole
  UserPoolCustomMessageLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: UserPool
    Properties:
      Action: lambda:invokeFunction
      Principal: cognito-idp.amazonaws.com
      FunctionName:
        Ref: functionamplifyIdentityBrokerCustomMessageName
      SourceArn:
        Fn::GetAtt:
          - UserPool
          - Arn
  UserPoolDefineAuthChallengeLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: UserPool
    Properties:
      Action: lambda:invokeFunction
      Principal: cognito-idp.amazonaws.com
      FunctionName:
        Ref: functionamplifyIdentityBrokerDefineAuthChallengeName
      SourceArn:
        Fn::GetAtt:
          - UserPool
          - Arn
  UserPoolVerifyAuthChallengeLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: UserPool
    Properties:
      Action: lambda:invokeFunction
      Principal: cognito-idp.amazonaws.com
      FunctionName:
        Ref: functionamplifyIdentityBrokerVerifyAuthChallengeName
      SourceArn:
        Fn::GetAtt:
          - UserPool
          - Arn
  UserPoolCreateAuthChallengeLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: UserPool
    Properties:
      Action: lambda:invokeFunction
      Principal: cognito-idp.amazonaws.com
      FunctionName:
        Ref: functionamplifyIdentityBrokerCreateAuthChallengeName
      SourceArn:
        Fn::GetAtt:
          - UserPool
          - Arn
  UserPoolClientWeb:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: brokeraue6c0c3e3_app_clientWeb
      RefreshTokenValidity:
        Ref: userpoolClientRefreshTokenValidity
      UserPoolId:
        Ref: UserPool
      ReadAttributes:
        Ref: userpoolClientReadAttributes
      WriteAttributes:
        Ref: userpoolClientWriteAttributes
      CallbackURLs:
        - https://temporaryurl.youcanremovethat.com
      LogoutURLs:
        - https://temporaryurl.youcanremovethat.com
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
    DependsOn: UserPool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: brokeraue6c0c3e3_app_client
      GenerateSecret:
        Ref: userpoolClientGenerateSecret
      RefreshTokenValidity:
        Ref: userpoolClientRefreshTokenValidity
      UserPoolId:
        Ref: UserPool
      ReadAttributes:
        Ref: userpoolClientReadAttributes
      WriteAttributes:
        Ref: userpoolClientWriteAttributes
      CallbackURLs:
        - https://temporaryurl.youcanremovethat.com
      LogoutURLs:
        - https://temporaryurl.youcanremovethat.com
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
    DependsOn: UserPool
  UserPoolClientRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - Ref: userpoolClientLambdaRole
          - Fn::Join:
              - ''
              - - upClientLambdaRole
                - undefined
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - '-'
                        - Ref: AWS::StackName
                - '-'
                - Ref: env
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    DependsOn: UserPoolClient
  UserPoolClientLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const aws = require('aws-sdk');
          const identity = new aws.CognitoIdentityServiceProvider();
          exports.handler = (event, context, callback) => {
              if (event.RequestType == 'Delete') {
                  response.send(event, context, response.SUCCESS, {});
              }
              if (event.RequestType == 'Update' || event.RequestType == 'Create') {
                  const params = {
                      ClientId: event.ResourceProperties.clientId,
                      UserPoolId: event.ResourceProperties.userpoolId,
                  };
                  identity
                      .describeUserPoolClient(params)
                      .promise()
                      .then(res => {
                          response.send(event, context, response.SUCCESS, { appSecret: res.UserPoolClient.ClientSecret });
                      })
                      .catch(err => {
                          response.send(event, context, response.FAILED, { err });
                      });
              }
          };
      Handler: index.handler
      Runtime: nodejs16.x
      Timeout: '300'
      Role:
        Fn::GetAtt:
          - UserPoolClientRole
          - Arn
    DependsOn: UserPoolClientRole
  UserPoolClientLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: brokeraue6c0c3e3_userpoolclient_lambda_iam_policy
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolClient
            Resource:
              Fn::GetAtt:
                - UserPool
                - Arn
    DependsOn: UserPoolClientLambda
  UserPoolClientLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: brokeraue6c0c3e3_userpoolclient_lambda_log_policy
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub:
                - >-
                  arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                - region:
                    Ref: AWS::Region
                  account:
                    Ref: AWS::AccountId
                  lambda:
                    Ref: UserPoolClientLambda
    DependsOn: UserPoolClientLambdaPolicy
  UserPoolClientInputs:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - UserPoolClientLambda
          - Arn
      clientId:
        Ref: UserPoolClient
      userpoolId:
        Ref: UserPool
    DependsOn: UserPoolClientLogPolicy
  HostedUICustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const aws = require('aws-sdk');
          const identity = new aws.CognitoIdentityServiceProvider();
          exports.handler = (event, context, callback) => {
              const userPoolId = event.ResourceProperties.userPoolId;
              const inputDomainName = event.ResourceProperties.hostedUIDomainName;
              let deleteUserPoolDomain = domainName => {
                  let params = { Domain: domainName, UserPoolId: userPoolId };
                  return identity.deleteUserPoolDomain(params).promise();
              };
              if (event.RequestType == 'Delete') {
                  deleteUserPoolDomain(inputDomainName)
                      .then(() => {
                          response.send(event, context, response.SUCCESS, {});
                      })
                      .catch(err => {
                          console.log(err);
                          response.send(event, context, response.FAILED, { err });
                      });
              }
              if (event.RequestType == 'Update' || event.RequestType == 'Create') {
                  let checkDomainAvailability = domainName => {
                      let params = { Domain: domainName };
                      return identity
                          .describeUserPoolDomain(params)
                          .promise()
                          .then(res => {
                              if (res.DomainDescription && res.DomainDescription.UserPool) {
                                  return false;
                              }
                              return true;
                          })
                          .catch(err => {
                              return false;
                          });
                  };
                  let createUserPoolDomain = domainName => {
                      let params = { Domain: domainName, UserPoolId: userPoolId };
                      return identity.createUserPoolDomain(params).promise();
                  };
                  identity
                      .describeUserPool({ UserPoolId: userPoolId })
                      .promise()
                      .then(result => {
                          if (inputDomainName) {
                              if (result.UserPool.Domain === inputDomainName) {
                                  return;
                              } else {
                                  if (!result.UserPool.Domain) {
                                      return checkDomainAvailability(inputDomainName).then(isDomainAvailable => {
                                          if (isDomainAvailable) {
                                              return createUserPoolDomain(inputDomainName);
                                          } else {
                                              throw new Error('Domain not available');
                                          }
                                      });
                                  } else {
                                      return checkDomainAvailability(inputDomainName).then(isDomainAvailable => {
                                          if (isDomainAvailable) {
                                              return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));
                                          } else {
                                              throw new Error('Domain not available');
                                          }
                                      });
                                  }
                              }
                          } else {
                              if (result.UserPool.Domain) {
                                  return deleteUserPoolDomain(result.UserPool.Domain);
                              }
                          }
                      })
                      .then(() => {
                          response.send(event, context, response.SUCCESS, {});
                      })
                      .catch(err => {
                          console.log(err);
                          response.send(event, context, response.FAILED, { err });
                      });
              }
          };
      Handler: index.handler
      Runtime: nodejs16.x
      Timeout: '300'
      Role:
        Fn::GetAtt:
          - UserPoolClientRole
          - Arn
    DependsOn: UserPoolClientRole
  HostedUICustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - '-'
          - - Ref: UserPool
            - hostedUI
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:CreateUserPoolDomain
              - cognito-idp:DescribeUserPool
              - cognito-idp:DeleteUserPoolDomain
            Resource:
              Fn::GetAtt:
                - UserPool
                - Arn
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolDomain
            Resource: '*'
    DependsOn: HostedUICustomResource
  HostedUICustomResourceLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - '-'
          - - Ref: UserPool
            - hostedUILogPolicy
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub:
                - >-
                  arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                - region:
                    Ref: AWS::Region
                  account:
                    Ref: AWS::AccountId
                  lambda:
                    Ref: HostedUICustomResource
    DependsOn: HostedUICustomResourcePolicy
  HostedUICustomResourceInputs:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - HostedUICustomResource
          - Arn
      userPoolId:
        Ref: UserPool
      hostedUIDomainName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - Ref: hostedUIDomainName
          - Fn::Join:
              - '-'
              - - Ref: hostedUIDomainName
                - Ref: env
    DependsOn: HostedUICustomResourceLogPolicy
  HostedUIProvidersCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const aws = require('aws-sdk');
          const identity = new aws.CognitoIdentityServiceProvider();
          exports.handler = (event, context, callback) => {
              try {
                  const userPoolId = event.ResourceProperties.userPoolId;
                  let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
                  let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
                  if (hostedUIProviderCreds.length === 0) {
                      response.send(event, context, response.SUCCESS, {});
                  }
                  if (event.RequestType == 'Delete') {
                      response.send(event, context, response.SUCCESS, {});
                  }
                  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
                      let getRequestParams = providerName => {
                          let providerMetaIndex = hostedUIProviderMeta.findIndex(provider => provider.ProviderName === providerName);
                          let providerMeta = hostedUIProviderMeta[providerMetaIndex];
                          let providerCredsIndex = hostedUIProviderCreds.findIndex(provider => provider.ProviderName === providerName);
                          let providerCreds = hostedUIProviderCreds[providerCredsIndex];
                          let requestParams = {
                              ProviderName: providerMeta.ProviderName,
                              UserPoolId: userPoolId,
                              AttributeMapping: providerMeta.AttributeMapping,
                          };
                          if (providerMeta.ProviderName === 'SignInWithApple') {
                              if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
                                  requestParams.ProviderDetails = {
                                      client_id: providerCreds.client_id,
                                      team_id: providerCreds.team_id,
                                      key_id: providerCreds.key_id,
                                      private_key: providerCreds.private_key,
                                      authorize_scopes: providerMeta.authorize_scopes,
                                  };
                              } else {
                                  requestParams = null;
                              }
                          } else {
                              if (providerCreds.client_id && providerCreds.client_secret) {
                                  requestParams.ProviderDetails = {
                                      client_id: providerCreds.client_id,
                                      client_secret: providerCreds.client_secret,
                                      authorize_scopes: providerMeta.authorize_scopes,
                                  };
                              } else {
                                  requestParams = null;
                              }
                          }
                          return requestParams;
                      };
                      let createIdentityProvider = providerName => {
                          let requestParams = getRequestParams(providerName);
                          if (!requestParams) {
                              return Promise.resolve();
                          }
                          requestParams.ProviderType = requestParams.ProviderName;
                          return identity.createIdentityProvider(requestParams).promise();
                      };
                      let updateIdentityProvider = providerName => {
                          let requestParams = getRequestParams(providerName);
                          if (!requestParams) {
                              return Promise.resolve();
                          }
                          return identity.updateIdentityProvider(requestParams).promise();
                      };
                      let deleteIdentityProvider = providerName => {
                          let params = { ProviderName: providerName, UserPoolId: userPoolId };
                          return identity.deleteIdentityProvider(params).promise();
                      };
                      let providerPromises = [];
                      identity
                          .listIdentityProviders({ UserPoolId: userPoolId, MaxResults: 60 })
                          .promise()
                          .then(result => {
                              console.log(result);
                              let providerList = result.Providers.map(provider => provider.ProviderName);
                              let providerListInParameters = hostedUIProviderMeta.map(provider => provider.ProviderName);
                              hostedUIProviderMeta.forEach(providerMetadata => {
                                  if (providerList.indexOf(providerMetadata.ProviderName) > -1) {
                                      providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));
                                  } else {
                                      providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));
                                  }
                              });
                              providerList.forEach(provider => {
                                  if (providerListInParameters.indexOf(provider) < 0) {
                                      providerPromises.push(deleteIdentityProvider(provider));
                                  }
                              });
                              return Promise.all(providerPromises);
                          })
                          .then(() => {
                              response.send(event, context, response.SUCCESS, {});
                          })
                          .catch(err => {
                              console.log(err.stack);
                              response.send(event, context, response.FAILED, { err });
                          });
                  }
              } catch (err) {
                  console.log(err.stack);
                  response.send(event, context, response.FAILED, { err });
              }
          };
      Handler: index.handler
      Runtime: nodejs16.x
      Timeout: '300'
      Role:
        Fn::GetAtt:
          - UserPoolClientRole
          - Arn
    DependsOn: UserPoolClientRole
  HostedUIProvidersCustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - '-'
          - - Ref: UserPool
            - hostedUIProvider
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:CreateIdentityProvider
              - cognito-idp:UpdateIdentityProvider
              - cognito-idp:ListIdentityProviders
              - cognito-idp:DeleteIdentityProvider
            Resource:
              Fn::GetAtt:
                - UserPool
                - Arn
    DependsOn: HostedUIProvidersCustomResource
  HostedUIProvidersCustomResourceLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - '-'
          - - Ref: UserPool
            - hostedUIProviderLogPolicy
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub:
                - >-
                  arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                - region:
                    Ref: AWS::Region
                  account:
                    Ref: AWS::AccountId
                  lambda:
                    Ref: HostedUIProvidersCustomResource
    DependsOn: HostedUIProvidersCustomResourcePolicy
  HostedUIProvidersCustomResourceInputs:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - HostedUIProvidersCustomResource
          - Arn
      userPoolId:
        Ref: UserPool
      hostedUIProviderMeta:
        Ref: hostedUIProviderMeta
      hostedUIProviderCreds:
        Ref: hostedUIProviderCreds
    DependsOn: HostedUIProvidersCustomResourceLogPolicy
  OAuthCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const aws = require('aws-sdk');
          const identity = new aws.CognitoIdentityServiceProvider();
          exports.handler = (event, context, callback) => {
              try {
                  const userPoolId = event.ResourceProperties.userPoolId;
                  let webClientId = event.ResourceProperties.webClientId;
                  let nativeClientId = event.ResourceProperties.nativeClientId;
                  let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
                  let oAuthMetadata = JSON.parse(event.ResourceProperties.oAuthMetadata);
                  let providerList = hostedUIProviderMeta.map(provider => provider.ProviderName);
                  providerList.push('COGNITO');
                  if (event.RequestType == 'Delete') {
                      response.send(event, context, response.SUCCESS, {});
                  }
                  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
                      let params = {
                          UserPoolId: userPoolId,
                          AllowedOAuthFlows: oAuthMetadata.AllowedOAuthFlows,
                          AllowedOAuthFlowsUserPoolClient: true,
                          AllowedOAuthScopes: oAuthMetadata.AllowedOAuthScopes,
                          CallbackURLs: oAuthMetadata.CallbackURLs,
                          LogoutURLs: oAuthMetadata.LogoutURLs,
                          SupportedIdentityProviders: providerList,
                      };
                      console.log(params);
                      let updateUserPoolClientPromises = [];
                      params.ClientId = webClientId;
                      updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());
                      params.ClientId = nativeClientId;
                      updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());
                      Promise.all(updateUserPoolClientPromises)
                          .then(() => {
                              response.send(event, context, response.SUCCESS, {});
                          })
                          .catch(err => {
                              console.log(err.stack);
                              response.send(event, context, response.FAILED, { err });
                          });
                  }
              } catch (err) {
                  console.log(err.stack);
                  response.send(event, context, response.FAILED, { err });
              }
          };
      Handler: index.handler
      Runtime: nodejs16.x
      Timeout: '300'
      Role:
        Fn::GetAtt:
          - UserPoolClientRole
          - Arn
    DependsOn: HostedUIProvidersCustomResourceInputs
  OAuthCustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - '-'
          - - Ref: UserPool
            - OAuth
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:UpdateUserPoolClient
            Resource:
              Fn::GetAtt:
                - UserPool
                - Arn
    DependsOn: OAuthCustomResource
  OAuthCustomResourceLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - '-'
          - - Ref: UserPool
            - OAuthLogPolicy
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub:
                - >-
                  arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                - region:
                    Ref: AWS::Region
                  account:
                    Ref: AWS::AccountId
                  lambda:
                    Ref: OAuthCustomResource
    DependsOn: OAuthCustomResourcePolicy
  OAuthCustomResourceInputs:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - OAuthCustomResource
          - Arn
      userPoolId:
        Ref: UserPool
      hostedUIProviderMeta:
        Ref: hostedUIProviderMeta
      oAuthMetadata:
        Ref: oAuthMetadata
      webClientId:
        Ref: UserPoolClientWeb
      nativeClientId:
        Ref: UserPoolClient
    DependsOn: OAuthCustomResourceLogPolicy
  MFALambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - brokeraue6c0c3e3_totp_lambda_role
          - Fn::Join:
              - ''
              - - brokeraue6c0c3e3_totp_lambda_role
                - '-'
                - Ref: env
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: brokeraue6c0c3e3_totp_pass_role_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  Fn::If:
                    - ShouldNotCreateEnvResources
                    - arn:aws:iam:::role/brokeraue6c0c3e3_totp_lambda_role
                    - Fn::Join:
                        - ''
                        - - arn:aws:iam:::role/brokeraue6c0c3e3_totp_lambda_role
                          - '-'
                          - Ref: env
        - PolicyName: brokeraue6c0c3e3_sns_pass_role_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  Fn::GetAtt:
                    - SNSRole
                    - Arn
  MFALambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const aws = require('aws-sdk');
          const identity = new aws.CognitoIdentityServiceProvider();
          exports.handler = (event, context, callback) => {
              if (event.RequestType == 'Delete') {
                  response.send(event, context, response.SUCCESS, {})
              }
              if (event.RequestType == 'Update' || event.RequestType == 'Create') {
                  let totpParams = {};
                  try {
                      totpParams = {
                          UserPoolId: event.ResourceProperties.userPoolId,
                          MfaConfiguration: event.ResourceProperties.mfaConfiguration,
                          SmsMfaConfiguration: {
                              SmsAuthenticationMessage: event.ResourceProperties.smsAuthenticationMessage,
                              SmsConfiguration: {
                                  SnsCallerArn: event.ResourceProperties.smsConfigCaller,
                                  ExternalId: event.ResourceProperties.smsConfigExternalId
                              }
                          },
                          SoftwareTokenMfaConfiguration: {Enabled: event.ResourceProperties.totpEnabled.toLowerCase() === 'true' ? true : false}
                      };
                  } catch(e) {
                      response.send(event, context, response.FAILED, {e});
                  };
                  identity.setUserPoolMfaConfig(totpParams).promise()
                      .then((res) => {
                          response.send(event, context, response.SUCCESS, {res});
                      })
                      .catch((err) => {
                          response.send(event, context, response.FAILED, {err});
                      });
              }
          };
      Handler: index.handler
      Runtime: nodejs16.x
      Timeout: '300'
      Role:
        Fn::GetAtt:
          - MFALambdaRole
          - Arn
    DependsOn: MFALambdaRole
  MFALambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: brokeraue6c0c3e3_totp_lambda_iam_policy
      Roles:
        - Fn::If:
            - ShouldNotCreateEnvResources
            - brokeraue6c0c3e3_totp_lambda_role
            - Fn::Join:
                - ''
                - - brokeraue6c0c3e3_totp_lambda_role
                  - '-'
                  - Ref: env
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:SetUserPoolMfaConfig
            Resource:
              Fn::GetAtt:
                - UserPool
                - Arn
    DependsOn: MFALambda
  MFALogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: brokeraue6c0c3e3_totp_lambda_log_policy
      Roles:
        - Fn::If:
            - ShouldNotCreateEnvResources
            - brokeraue6c0c3e3_totp_lambda_role
            - Fn::Join:
                - ''
                - - brokeraue6c0c3e3_totp_lambda_role
                  - '-'
                  - Ref: env
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub:
                - >-
                  arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                - region:
                    Ref: AWS::Region
                  account:
                    Ref: AWS::AccountId
                  lambda:
                    Ref: MFALambda
    DependsOn: MFALambdaPolicy
  MFALambdaInputs:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - MFALambda
          - Arn
      userPoolId:
        Ref: UserPool
      mfaConfiguration:
        Ref: mfaConfiguration
      totpEnabled: true
      smsConfigCaller:
        Fn::GetAtt:
          - SNSRole
          - Arn
      smsAuthenticationMessage:
        Ref: smsAuthenticationMessage
      smsConfigExternalId: brokeraue6c0c3e3_role_external_id
    DependsOn: MFALogPolicy
Outputs:
  HostedUIDomain:
    Value:
      Fn::If:
        - ShouldNotCreateEnvResources
        - Ref: hostedUIDomainName
        - Fn::Join:
            - '-'
            - - Ref: hostedUIDomainName
              - Ref: env
  OAuthMetadata:
    Value:
      Ref: oAuthMetadata
  UserPoolId:
    Value:
      Ref: UserPool
    Description: Id for the user pool
  UserPoolName:
    Value:
      Ref: userPoolName
  AppClientIDWeb:
    Value:
      Ref: UserPoolClientWeb
    Description: The user pool app client id for web
  AppClientID:
    Value:
      Ref: UserPoolClient
    Description: The user pool app client id
  AppClientSecret:
    Value:
      Fn::GetAtt:
        - UserPoolClientInputs
        - appSecret
  CreatedSNSRole:
    Value:
      Fn::GetAtt:
        - SNSRole
        - Arn
    Description: role arn
